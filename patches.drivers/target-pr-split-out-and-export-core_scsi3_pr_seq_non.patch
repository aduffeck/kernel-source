From 3a363c9f4afd3151ddd0c61b1d262fddacebce57 Mon Sep 17 00:00:00 2001
From: David Disseldorp <ddiss@suse.de>
Date: Thu, 27 Aug 2015 11:12:39 +0200
Subject: [PATCH] target/pr: split out and export
 core_scsi3_pr_seq_non_holder()
Patch-mainline: Not yet, SES2 clustered LIO/RBD
References: fate#318836

Move reservation backend specific code out into
target_scsi3_pr_reservation_check(), leaving only logic to determine
whether reservation conflict should be returned given PR/cdb
conditionals.

Xxx: target_core_pr.h should be split out into library header?

Signed-off-by: David Disseldorp <ddiss@suse.de>
[ddiss@suse.de: rebase against SLE12 kernel]

---
 drivers/target/target_core_pr.c |   58 ++++++++++++++++++++--------------------
 drivers/target/target_core_pr.h |    1 
 2 files changed, 31 insertions(+), 28 deletions(-)

--- a/drivers/target/target_core_pr.c
+++ b/drivers/target/target_core_pr.c
@@ -314,32 +314,17 @@ out:
  * This function is called by those initiator ports who are *NOT*
  * the active PR reservation holder when a reservation is present.
  */
-static int core_scsi3_pr_seq_non_holder(
-	struct se_cmd *cmd,
-	u32 pr_reg_type)
+int core_scsi3_pr_seq_non_holder(struct se_cmd *cmd, u32 pr_reg_type,
+				 char *dbg_nexus, bool registered_nexus)
 {
 	unsigned char *cdb = cmd->t_task_cdb;
-	struct se_dev_entry *se_deve;
-	struct se_session *se_sess = cmd->se_sess;
-	int other_cdb = 0, ignore_reg;
-	int registered_nexus = 0, ret = 1; /* Conflict by default */
+	int other_cdb = 0;
+	int ret = 1; /* Conflict by default */
 	int all_reg = 0, reg_only = 0; /* ALL_REG, REG_ONLY */
 	int we = 0; /* Write Exclusive */
 	int legacy = 0; /* Act like a legacy device and return
 			 * RESERVATION CONFLICT on some CDBs */
 
-	if (!se_sess->se_node_acl->device_list)
-		return;
-
-	se_deve = se_sess->se_node_acl->device_list[cmd->orig_fe_lun];
-	/*
-	 * Determine if the registration should be ignored due to
-	 * non-matching ISIDs in target_scsi3_pr_reservation_check().
-	 */
-	ignore_reg = (pr_reg_type & 0x80000000);
-	if (ignore_reg)
-		pr_reg_type &= ~0x80000000;
-
 	switch (pr_reg_type) {
 	case PR_TYPE_WRITE_EXCLUSIVE:
 		we = 1;
@@ -348,8 +333,6 @@ static int core_scsi3_pr_seq_non_holder(
 		 * Some commands are only allowed for the persistent reservation
 		 * holder.
 		 */
-		if ((se_deve->def_pr_registered) && !(ignore_reg))
-			registered_nexus = 1;
 		break;
 	case PR_TYPE_WRITE_EXCLUSIVE_REGONLY:
 		we = 1;
@@ -358,8 +341,6 @@ static int core_scsi3_pr_seq_non_holder(
 		 * Some commands are only allowed for registered I_T Nexuses.
 		 */
 		reg_only = 1;
-		if ((se_deve->def_pr_registered) && !(ignore_reg))
-			registered_nexus = 1;
 		break;
 	case PR_TYPE_WRITE_EXCLUSIVE_ALLREG:
 		we = 1;
@@ -368,8 +349,6 @@ static int core_scsi3_pr_seq_non_holder(
 		 * Each registered I_T Nexus is a reservation holder.
 		 */
 		all_reg = 1;
-		if ((se_deve->def_pr_registered) && !(ignore_reg))
-			registered_nexus = 1;
 		break;
 	default:
 		return -EINVAL;
@@ -511,7 +490,7 @@ static int core_scsi3_pr_seq_non_holder(
 			pr_debug("%s Conflict for unregistered nexus"
 				" %s CDB: 0x%02x to %s reservation\n",
 				transport_dump_cmd_direction(cmd),
-				se_sess->se_node_acl->initiatorname, cdb[0],
+				dbg_nexus, cdb[0],
 				core_scsi3_pr_dump_type(pr_reg_type));
 			return 1;
 		} else {
@@ -563,18 +542,22 @@ static int core_scsi3_pr_seq_non_holder(
 	pr_debug("%s Conflict for %sregistered nexus %s CDB: 0x%2x"
 		" for %s reservation\n", transport_dump_cmd_direction(cmd),
 		(registered_nexus) ? "" : "un",
-		se_sess->se_node_acl->initiatorname, cdb[0],
+		dbg_nexus, cdb[0],
 		core_scsi3_pr_dump_type(pr_reg_type));
 
 	return 1; /* Conflict by default */
 }
+EXPORT_SYMBOL(core_scsi3_pr_seq_non_holder);
 
 static sense_reason_t
 target_scsi3_pr_reservation_check(struct se_cmd *cmd)
 {
 	struct se_device *dev = cmd->se_dev;
+	struct se_dev_entry *se_deve;
 	struct se_session *sess = cmd->se_sess;
 	u32 pr_reg_type;
+	bool registered_nexus;
+	int ignore_reg;
 
 	if (!dev->dev_pr_res_holder)
 		return 0;
@@ -595,7 +578,26 @@ target_scsi3_pr_reservation_check(struct
 	return 0;
 
 check_nonholder:
-	if (core_scsi3_pr_seq_non_holder(cmd, pr_reg_type))
+	/*
+	 * Determine if the registration should be ignored due to
+	 * non-matching ISIDs in target_scsi3_pr_reservation_check().
+	 */
+	ignore_reg = (pr_reg_type & 0x80000000);
+	if (ignore_reg)
+		pr_reg_type &= ~0x80000000;
+
+	if (!sess->se_node_acl->device_list)
+		return TCM_RESERVATION_CONFLICT;
+
+	se_deve = sess->se_node_acl->device_list[cmd->orig_fe_lun];
+	if ((se_deve->def_pr_registered) && !(ignore_reg))
+		registered_nexus = true;
+	else
+		registered_nexus = false;
+
+	if (core_scsi3_pr_seq_non_holder(cmd, pr_reg_type,
+					 sess->se_node_acl->initiatorname,
+					 registered_nexus));
 		return TCM_RESERVATION_CONFLICT;
 	return 0;
 }
--- a/drivers/target/target_core_pr.h
+++ b/drivers/target/target_core_pr.h
@@ -65,6 +65,7 @@ extern void core_scsi3_free_pr_reg_from_
 					     struct se_node_acl *);
 extern void core_scsi3_free_all_registrations(struct se_device *);
 extern unsigned char *core_scsi3_pr_dump_type(int);
+extern int core_scsi3_pr_seq_non_holder(struct se_cmd *, u32, char *, bool);
 
 extern sense_reason_t target_scsi3_emulate_pr_in(struct se_cmd *);
 extern sense_reason_t target_scsi3_emulate_pr_out(struct se_cmd *);
