From http://xenbits.xen.org/hg/linux-2.6.18-xen.hg/rev/3f51e783c26a
From: xen-devel@lists.xenproject.org
Patch-mainline: Never, SUSE-Xen specific
Subject: x86/evtchn: make use of PHYSDEVOP_map_pirq

Xen commit 669d4b85c4 ("x86/IO-APIC: don't create pIRQ mapping from
masked RTE") revealed that for any interrupts which get set up masked
(commonly at least level triggered ones), the pIRQ <-> IRQ mapping
never gets established (since the IO-APIC RTE writes now don't have
that effect anymore when the mask bit is set), resulting in subsequent
binding of the pIRQ to fail.

Signed-off-by: Jan Beulich <jbeulich@suse.com>

--- a/drivers/xen/core/evtchn.c
+++ b/drivers/xen/core/evtchn.c
@@ -1113,13 +1113,34 @@ void irq_resume(void)
 #define identity_mapped_irq(irq) (1)
 #endif
 
-void evtchn_register_pirq(int irq)
+int evtchn_register_pirq(int irq)
 {
+	struct physdev_map_pirq map_pirq = {
+		.domid = DOMID_SELF,
+		.type = MAP_PIRQ_TYPE_GSI,
+		.index = irq,
+		.pirq = irq
+	};
+
 	BUG_ON(irq < PIRQ_BASE || irq - PIRQ_BASE >= NR_PIRQS);
-	if (identity_mapped_irq(irq) || type_from_irq(irq) != IRQT_UNBOUND)
-		return;
-	irq_info[irq] = mk_irq_info(IRQT_PIRQ, irq, 0);
-	irq_desc[irq].chip = &pirq_type;
+
+	switch (type_from_irq(irq)) {
+	case IRQT_UNBOUND:
+		break;
+	case IRQT_PIRQ:
+		if (index_from_irq(irq) == irq)
+			return -EEXIST;
+	default:
+		return -EBUSY;
+	}
+
+	if (!identity_mapped_irq(irq)) {
+		irq_info[irq] = mk_irq_info(IRQT_PIRQ, irq, 0);
+		irq_desc[irq].chip = &pirq_type;
+	}
+
+	return is_initial_xendomain()
+	       ? HYPERVISOR_physdev_op(PHYSDEVOP_map_pirq, &map_pirq) : 0;
 }
 
 int evtchn_map_pirq(int irq, int xen_pirq)
--- a/include/xen/evtchn.h
+++ b/include/xen/evtchn.h
@@ -102,7 +102,7 @@ asmlinkage void evtchn_do_upcall(struct
 void evtchn_device_upcall(int port);
 
 /* Mark a PIRQ as unavailable for dynamic allocation. */
-void evtchn_register_pirq(int irq);
+int evtchn_register_pirq(int irq);
 /* Map a Xen-supplied PIRQ to a dynamically allocated one. */
 int evtchn_map_pirq(int irq, int xen_pirq);
 /* Look up a Xen-supplied PIRQ for a dynamically allocated one. */
