From http://xenbits.xen.org/hg/linux-2.6.18-xen.hg/rev/7ba8deb4c1be
From: xen-devel@lists.xenproject.org
Patch-mainline: Never, SUSE-Xen specific
Subject: blktap2: eliminate race from deferred work queue handling
References: bsc#911687

Clearing BLKTAP_DEFERRED together with splicing the queue onto a local
list is premature: blktap_defer() must not re-queue a tap before it got
removed from the list it's currently on (no matter whether that's the
global or local one), or else list corruption can occur. Effectively
the lock protects not only the global list (as its name suggests) but
also the list entries of all tap-s.

Effectively the BLKTAP_DEFERRED bit becomes pointless now: With the
changed locking we could as well check list_empty() in blktap_defer()
(of course requiring blktap_control_initialize_tap() to initialize the
entry).

Convert a bogus test_bit()/set_bit() pair to test_and_set_bit() at
once.

Signed-off-by: Jan Beulich <jbeulich@suse.com>

--- a/drivers/xen/blktap2/wait_queue.c
+++ b/drivers/xen/blktap2/wait_queue.c
@@ -15,13 +15,14 @@ blktap_run_deferred(void)
 
 	spin_lock_irqsave(&deferred_work_lock, flags);
 	list_splice_init(&deferred_work_queue, &queue);
-	list_for_each_entry(tap, &queue, deferred_queue)
-		clear_bit(BLKTAP_DEFERRED, &tap->dev_inuse);
 	spin_unlock_irqrestore(&deferred_work_lock, flags);
 
 	while (!list_empty(&queue)) {
 		tap = list_entry(queue.next, struct blktap, deferred_queue);
+		spin_lock_irqsave(&deferred_work_lock, flags);
+		clear_bit(BLKTAP_DEFERRED, &tap->dev_inuse);
 		list_del_init(&tap->deferred_queue);
+		spin_unlock_irqrestore(&deferred_work_lock, flags);
 		blktap_device_restart(tap);
 	}
 }
@@ -32,9 +33,7 @@ blktap_defer(struct blktap *tap)
 	unsigned long flags;
 
 	spin_lock_irqsave(&deferred_work_lock, flags);
-	if (!test_bit(BLKTAP_DEFERRED, &tap->dev_inuse)) {
-		set_bit(BLKTAP_DEFERRED, &tap->dev_inuse);
+	if (!test_and_set_bit(BLKTAP_DEFERRED, &tap->dev_inuse))
 		list_add_tail(&tap->deferred_queue, &deferred_work_queue);
-	}
 	spin_unlock_irqrestore(&deferred_work_lock, flags);
 }
