From: Takashi Iwai <tiwai@suse.de>
Subject: drm/i915: Fix missing backlight update during panel disablement
Patch-mainline: Never, SLE12 and openSUSE 13.2 specific
References: bsc#941113 boo#901754

This is a fix for the fallout of backlight brightness change while the
panel is off.

SLE12-SP1 took patches for Baytrail support based on 3.13 kernel
code.  This includes the change of backlight handling per pipe.  It
adds a check of the valid pipe to intel_panel_set_backlight(), where
the function returns immediately if it's INVALID_PIPE.

The referenced bug is triggered because this function is called while
the panel is off.  intel_panel_set_backlight() does also the cached
value management, and this is also skipped, thus the value update is
lost.

For fixing this, we need to accept the invalid pipe passed to the
function, but only update the cache without actually touching the
hardware.

Signed-off-by: Takashi Iwai <tiwai@suse.de>
Signed-off-by: Max Staudt <mstaudt@suse.de>

---
 drivers/gpu/drm/i915/intel_panel.c |   10 ++++++++--
 1 file changed, 8 insertions(+), 2 deletions(-)

--- a/drivers/gpu/drm/i915/intel_panel.c
+++ b/drivers/gpu/drm/i915/intel_panel.c
@@ -466,12 +466,15 @@ void intel_panel_set_backlight(struct in
 	unsigned long flags;
 	u64 n;

-	if (!panel->backlight.present || pipe == INVALID_PIPE)
+	if (!panel->backlight.present)
 		return;

 	spin_lock_irqsave(&dev_priv->backlight_lock, flags);

-	WARN_ON(panel->backlight.max == 0);
+	if (pipe == INVALID_PIPE && !panel->backlight.max)
+		goto out;
+	if (WARN_ON(panel->backlight.max == 0))
+		goto out;

 	/* scale to hardware max, but be careful to not overflow */
 	freq = panel->backlight.max;
@@ -483,9 +486,12 @@ void intel_panel_set_backlight(struct in
 	if (panel->backlight.device)
 		panel->backlight.device->props.brightness = level;

+	if (pipe == INVALID_PIPE)
+		goto out;
 	if (panel->backlight.enabled)
 		intel_panel_actually_set_backlight(connector, level);

+ out:
 	spin_unlock_irqrestore(&dev_priv->backlight_lock, flags);
 }

