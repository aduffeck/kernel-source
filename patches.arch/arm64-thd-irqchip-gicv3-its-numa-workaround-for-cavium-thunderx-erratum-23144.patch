From: Ganapatrao Kulkarni <gkulkarni@caviumnetworks.com>
Date: Wed, 19 Aug 2015 23:40:05 +0530
Subject: [PATCH] irqchip, gicv3-its, numa: Workaround for Cavium ThunderX
 erratum 23144	
Patch-mainline: Rework of submitted patch https://lkml.org/lkml/2015/8/22/63

This implements a workaround for gicv3-its erratum 23144 applicable
for Cavium's ThunderX multinode systems.

The erratum fixes the hang of ITS SYNC command by avoiding inter node
io and collections/cpu mapping. This fix is only applicable for
Cavium's ThunderX dual-socket platforms.

v3:
 * rebased onto errata patch set v5
 * added Kconfig description
 * removed changes in gic_check_capabilities()
 * named macros ITS_FLAGS_WORKAROUND_CAVIUM_*
 * renamed function numa_node_id_early() to
   cpu_get_node_thunderx_early() since this is ThunderX specific
 * separated functions for each erratum
 * introduced CONFIG_CAVIUM_ERRATUM_23144

Signed-off-by: Ganapatrao Kulkarni <gkulkarni@caviumnetworks.com>
[ rric: Reworked errata code, added helper functions, updated commit
  	message. ]
Signed-off-by: Robert Richter <rrichter@cavium.com>
Signed-off-by: Matthias Brugger <mbrugger@suse.com>
---
 arch/arm64/Kconfig               | 13 ++++++++++
 drivers/irqchip/irq-gic-v3-its.c | 52 ++++++++++++++++++++++++++++++++++++++--
 2 files changed, 63 insertions(+), 2 deletions(-)

diff --git a/arch/arm64/Kconfig b/arch/arm64/Kconfig
index 112fdab5ae19..d20ed995f732 100644
--- a/arch/arm64/Kconfig
+++ b/arch/arm64/Kconfig
@@ -471,6 +471,19 @@ config CAVIUM_ERRATUM_22375
 
 	  If unsure, say Y.
 
+config CAVIUM_ERRATUM_23144
+	bool "Cavium erratum 23144"
+	depends on NUMA
+	default y
+	help
+	  Enable workaround for erratum 23144.
+
+	  The erratum fixes the hang of ITS SYNC command by avoiding inter node
+	  io and collections/cpu mapping. This fix is only applicable for
+	  Cavium's ThunderX dual-socket platforms.
+
+	  If unsure, say Y.
+
 config CAVIUM_ERRATUM_23154
 	bool "Cavium erratum 23154: Access to ICC_IAR1_EL1 is not sync'ed"
 	default y
diff --git a/drivers/irqchip/irq-gic-v3-its.c b/drivers/irqchip/irq-gic-v3-its.c
index b75ea6636137..4e5ca3b5dbac 100644
--- a/drivers/irqchip/irq-gic-v3-its.c
+++ b/drivers/irqchip/irq-gic-v3-its.c
@@ -44,6 +44,7 @@
 
 #define ITS_FLAGS_CMDQ_NEEDS_FLUSHING		(1ULL << 0)
 #define ITS_FLAGS_WORKAROUND_CAVIUM_22375	(1ULL << 1)
+#define ITS_FLAGS_WORKAROUND_CAVIUM_23144	(1ULL << 2)
 
 #define RDIST_FLAGS_PROPBASE_NEEDS_FLUSHING	(1 << 0)
 
@@ -76,6 +77,7 @@ struct its_node {
 	struct list_head	its_device_list;
 	u64			flags;
 	u32			ite_size;
+	int			numa_node;
 };
 
 #define ITS_ITT_ALIGN		SZ_256
@@ -609,11 +611,18 @@ static void its_eoi_irq(struct irq_data *d)
 static int its_set_affinity(struct irq_data *d, const struct cpumask *mask_val,
 			    bool force)
 {
-	unsigned int cpu = cpumask_any_and(mask_val, cpu_online_mask);
+	unsigned int cpu;
 	struct its_device *its_dev = irq_data_get_irq_chip_data(d);
 	struct its_collection *target_col;
 	u32 id = its_get_event_id(d);
 
+	if (its_dev->its->flags & ITS_FLAGS_WORKAROUND_CAVIUM_23144) {
+		cpu = cpumask_any_and(mask_val,
+				cpumask_of_node(its_dev->its->numa_node));
+	} else {
+		cpu = cpumask_any_and(mask_val, cpu_online_mask);
+	}
+
 	if (cpu >= nr_cpu_ids)
 		return -EINVAL;
 
@@ -1093,6 +1102,11 @@ static void its_cpu_init_lpis(void)
 	dsb(sy);
 }
 
+static inline int cpu_get_node_thunderx_early(void)
+{
+	return MPIDR_AFFINITY_LEVEL(read_cpuid_mpidr(), 2);
+}
+
 static void its_cpu_init_collection(void)
 {
 	struct its_node *its;
@@ -1104,6 +1118,11 @@ static void its_cpu_init_collection(void)
 	list_for_each_entry(its, &its_nodes, entry) {
 		u64 target;
 
+		/* avoid cross node core and its mapping */
+		if ((its->flags & ITS_FLAGS_WORKAROUND_CAVIUM_23144) &&
+			its->numa_node != cpu_get_node_thunderx_early())
+				continue;
+
 		/*
 		 * We now have to bind each collection to its target
 		 * redistributor.
@@ -1372,9 +1391,15 @@ static void its_irq_domain_activate(struct irq_domain *domain,
 {
 	struct its_device *its_dev = irq_data_get_irq_chip_data(d);
 	u32 event = its_get_event_id(d);
+	unsigned int cpu;
+
+	if (its_dev->its->flags & ITS_FLAGS_WORKAROUND_CAVIUM_23144)
+		cpu = cpumask_first(cpumask_of_node(its_dev->its->numa_node));
+	else
+		cpu = cpumask_first(cpu_online_mask);
 
 	/* Bind the LPI to the first possible CPU */
-	its_dev->event_map.col_map[event] = cpumask_first(cpu_online_mask);
+	its_dev->event_map.col_map[event] = cpu;
 
 	/* Map the GIC IRQ and event to the device */
 	its_send_mapvi(its_dev, d->hwirq, event);
@@ -1464,6 +1489,21 @@ static void __maybe_unused its_enable_quirk_cavium_22375(void *data)
 	its->flags |= ITS_FLAGS_WORKAROUND_CAVIUM_22375;
 }
 
+static inline int its_get_node_thunderx(struct its_node *its)
+{
+	return (its->phys_base >> 44) & 0x3;
+}
+
+static void __maybe_unused its_enable_quirk_cavium_23144(void *data)
+{
+	struct its_node __maybe_unused *its = data;
+
+	if (num_possible_nodes() > 1) {
+		its->numa_node = its_get_node_thunderx(its);
+		its->flags |= ITS_FLAGS_WORKAROUND_CAVIUM_23144;
+	}
+}
+
 static const struct gic_quirk its_quirks[] = {
 #ifdef CONFIG_CAVIUM_ERRATUM_22375
 	{
@@ -1473,6 +1513,14 @@ static const struct gic_quirk its_quirks[] = {
 		.init	= its_enable_quirk_cavium_22375,
 	},
 #endif
+#ifdef CONFIG_CAVIUM_ERRATUM_23144
+	{
+		.desc	= "ITS: Cavium erratum 23144",
+		.iidr	= 0xa100034c,	/* ThunderX pass 1.x */
+		.mask	= 0xffff0fff,
+		.init	= its_enable_quirk_cavium_23144,
+	},
+#endif
 	{
 	}
 };
-- 
2.1.1

